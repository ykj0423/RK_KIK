<?phprequire_once("db.php");class validate extends DB{    var $err;    var $itemAry;    var $errMsg01 = 'が正しくありません';    var $errMsg02 = 'が設定されていません';    //------------------//    //  コンストラクタ  //    //------------------//    public function validate(){         $this->err = array();         //物理名=>論理名        $this->itemAry = array(                    'userid'=> 'ログインID',                          'pwd'=> 'パスワード',                       'passnew'=> '新しいパスワード',                       'passnew2'=> '新しいパスワード（再入力）',                       'mail'=> 'メールアドレス',                          'riyokb'=> '利用目的',                          'dannm'=> '団体名1',                          'dannm2'=> '団体名2',                          'kaigi'=> '会議名称',                          'rmcd'=> '施設コード',                          'usedt'=> '使用日付',                          'ninzu'=> '使用人数',                          'stjkn'=> '使用時間開始',                          'edjkn'=> '使用時間終了',                          );     }    //-----------------------    //  エラーチェック本体    //  引数    //      @item    : チェックしている項目の物理名    //      @value   : チェック対象値    //      @require : 必須かどうか（0:任意,1:必須)    //      @type    : あるべき型    //      @len     : あるべき桁数    //-----------------------    public function check($item,$value,$require,$type="",$len=0)    {        if ($require) { $this->inputCheck($item,$value); }        if (!empty($type)) { $this->typeCheck($item,$type,$value); }        if (!empty($len)) { $this->lenCheck($item,$len,$value); }    }    //必須チェック    public function inputCheck($item,$value)    {        if (empty($value)) {             $this->err['ErrItem'][] = $item;            $this->err['paramErrMsg'][] = $this->itemAry[$item].$this->errMsg02;        }    }    //型チェック    public function typeCheck($item,$type,$value)    {        $chk = true;        if (empty($value)) { return; }        switch ($type) {            case 'number':            case 'date':                $chk = is_numeric($value);                break;            case 'mail':                $chk = preg_match('/^([a-z0-9_]|\-|\.|\+)+@(([a-z0-9_]|\-)+\.)+[a-z]{2,6}$/i', $value);                break;            case 'only-eisu':                $chk = preg_match('/^[0-9a-zA-Z]+$/', $value);                break;            case 'all-hankaku':                $chk = preg_match('/^[0-9a-zA-Z^_.\*\~]+$/', $value);                break;            default:                break;        }        if (!$chk) {            $this->err['ErrItem'][] = $item;            $this->err['paramErrMsg'][] =  $this->itemAry[$item].$this->errMsg01;        }    }    //桁チェック    public function lenCheck($item,$len,$value)    {        if (empty($value)) { return; }        if (is_numeric($value)){            $keta = strlen($value);        }else{            $keta = mb_strlen($value);        }        if ( $keta > $len) {            $this->err['ErrItem'][] = $item;            $this->err['paramErrMsg'][] =$this->itemAry[$item].$this->errMsg01;        }    }}?>